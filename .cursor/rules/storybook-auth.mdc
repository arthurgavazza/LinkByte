# Storybook Authentication Patterns

## Mock Provider Setup
- Create a specialized mock auth provider for Storybook testing
- Implement same interface as the real provider but without external dependencies
- Export `useAuth` hook with same signature as the real one
- Include different states (authenticated, unauthenticated, loading)

```tsx
// stories/mock-providers.tsx
export function StoryAuthProvider({
  children,
  user,
  isAuthenticated,
  isLoading = false,
}: StoryAuthProviderProps) {
  // Return the Auth context with mock implementations
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
```

## Component Testing Strategy
- Create Storybook-specific versions of components that use auth
- Import mock providers directly in Storybook-specific components
- Pass auth state through parameters in stories
- Add appropriate decorators to provide context

```tsx
// stories/main-header.stories.tsx
export const LoggedIn: Story = {
  parameters: {
    authState: {
      isAuthenticated: true,
      user: { /* user data */ },
    },
  },
  decorators: [
    (Story, context) => {
      const authState = context.parameters.authState;
      return (
        <StoryAuthProvider {...authState}>
          <Story />
        </StoryAuthProvider>
      );
    },
  ],
}
```

## Testing Authentication States
- Create variants for authenticated, unauthenticated, and loading states
- Verify conditional rendering with test assertions
- Use the `play` function to test interactive elements
- Test username display and conditionally rendered navigation elements 