/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * LinkByte API
 * API for the LinkByte URL shortener
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BodyLoginApiAuthLoginPost,
  HTTPValidationError,
  UserCreate,
  UserResponse
} from '.././models'
import { customInstanceFn } from '../../custom-instance';



/**
 * Register a new user.
 * @summary Register
 */
export const registerApiAuthRegisterPost = (
    userCreate: UserCreate,
 ) => {
      
      
      return customInstanceFn<UserResponse>(
      {url: `/api/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreate
    },
      );
    }
  


export const getRegisterApiAuthRegisterPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreate}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  registerApiAuthRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterApiAuthRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>>
    export type RegisterApiAuthRegisterPostMutationBody = UserCreate
    export type RegisterApiAuthRegisterPostMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useRegisterApiAuthRegisterPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerApiAuthRegisterPost>>, TError,{data: UserCreate}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerApiAuthRegisterPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getRegisterApiAuthRegisterPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Login and get access token as HTTP-only cookie.
 * @summary Login
 */
export const loginApiAuthLoginPost = (
    bodyLoginApiAuthLoginPost: BodyLoginApiAuthLoginPost,
 ) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLoginApiAuthLoginPost.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyLoginApiAuthLoginPost.grant_type)
 }
formUrlEncoded.append('username', bodyLoginApiAuthLoginPost.username)
formUrlEncoded.append('password', bodyLoginApiAuthLoginPost.password)
if(bodyLoginApiAuthLoginPost.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLoginApiAuthLoginPost.scope)
 }
if(bodyLoginApiAuthLoginPost.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyLoginApiAuthLoginPost.client_id)
 }
if(bodyLoginApiAuthLoginPost.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyLoginApiAuthLoginPost.client_secret)
 }

      return customInstanceFn<unknown>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      );
    }
  


export const getLoginApiAuthLoginPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: BodyLoginApiAuthLoginPost}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: BodyLoginApiAuthLoginPost}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, {data: BodyLoginApiAuthLoginPost}> = (props) => {
          const {data} = props ?? {};

          return  loginApiAuthLoginPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginApiAuthLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginApiAuthLoginPost>>>
    export type LoginApiAuthLoginPostMutationBody = BodyLoginApiAuthLoginPost
    export type LoginApiAuthLoginPostMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useLoginApiAuthLoginPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginApiAuthLoginPost>>, TError,{data: BodyLoginApiAuthLoginPost}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof loginApiAuthLoginPost>>,
        TError,
        {data: BodyLoginApiAuthLoginPost},
        TContext
      > => {

      const mutationOptions = getLoginApiAuthLoginPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Refresh access token using refresh token.
 * @summary Refresh Token
 */
export const refreshTokenApiAuthRefreshPost = (
    
 ) => {
      
      
      return customInstanceFn<unknown>(
      {url: `/api/auth/refresh`, method: 'POST'
    },
      );
    }
  


export const getRefreshTokenApiAuthRefreshPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>, void> = () => {
          

          return  refreshTokenApiAuthRefreshPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenApiAuthRefreshPostMutationResult = NonNullable<Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>>
    
    export type RefreshTokenApiAuthRefreshPostMutationError = HTTPValidationError

    /**
 * @summary Refresh Token
 */
export const useRefreshTokenApiAuthRefreshPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof refreshTokenApiAuthRefreshPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getRefreshTokenApiAuthRefreshPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Logout by clearing auth cookies.
 * @summary Logout
 */
export const logoutApiAuthLogoutPost = (
    
 ) => {
      
      
      return customInstanceFn<unknown>(
      {url: `/api/auth/logout`, method: 'POST'
    },
      );
    }
  


export const getLogoutApiAuthLogoutPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, void> = () => {
          

          return  logoutApiAuthLogoutPost()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutApiAuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>>
    
    export type LogoutApiAuthLogoutPostMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogoutApiAuthLogoutPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutApiAuthLogoutPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get the current authenticated user.
 * @summary Get Current User Endpoint
 */
export const getCurrentUserEndpointApiAuthMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstanceFn<UserResponse>(
      {url: `/api/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetCurrentUserEndpointApiAuthMeGetQueryKey = () => {
    return [`/api/auth/me`] as const;
    }

    
export const getGetCurrentUserEndpointApiAuthMeGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>>, TError = HTTPValidationError>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserEndpointApiAuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>> = ({ signal }) => getCurrentUserEndpointApiAuthMeGet(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, retry: 3,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserEndpointApiAuthMeGetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>>
export type GetCurrentUserEndpointApiAuthMeGetInfiniteQueryError = HTTPValidationError

/**
 * @summary Get Current User Endpoint
 */
export const useGetCurrentUserEndpointApiAuthMeGetInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>>, TError = HTTPValidationError>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentUserEndpointApiAuthMeGetInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary Get Current User Endpoint
 */
export const prefetchGetCurrentUserEndpointApiAuthMeGetInfinite = async <TData = Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError = HTTPValidationError>(
 queryClient: QueryClient,  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }

  ): Promise<QueryClient> => {

  const queryOptions = getGetCurrentUserEndpointApiAuthMeGetInfiniteQueryOptions(options)

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
}


export const getGetCurrentUserEndpointApiAuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError = HTTPValidationError>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserEndpointApiAuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>> = ({ signal }) => getCurrentUserEndpointApiAuthMeGet(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000, retry: 3,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserEndpointApiAuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>>
export type GetCurrentUserEndpointApiAuthMeGetQueryError = HTTPValidationError

/**
 * @summary Get Current User Endpoint
 */
export const useGetCurrentUserEndpointApiAuthMeGet = <TData = Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError = HTTPValidationError>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentUserEndpointApiAuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary Get Current User Endpoint
 */
export const prefetchGetCurrentUserEndpointApiAuthMeGet = async <TData = Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError = HTTPValidationError>(
 queryClient: QueryClient,  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserEndpointApiAuthMeGet>>, TError, TData>>, }

  ): Promise<QueryClient> => {

  const queryOptions = getGetCurrentUserEndpointApiAuthMeGetQueryOptions(options)

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
}


